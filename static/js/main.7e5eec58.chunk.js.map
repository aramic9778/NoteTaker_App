{"version":3,"sources":["Components/Note.js","Components/AddNote.js","Components/NotesList.js","Components/Search.js","Components/Header.js","App.js","index.js"],"names":["Note","id","text","date","handleDeleteNote","handleEditNote","useState","editNote","setEditNote","noteText","setNoteText","className","rows","cols","onChange","event","target","value","length","autoFocus","onFocus","e","temp_value","onClick","handleSaveClick","size","AddNote","handleAddNote","placeholder","trim","NotesList","notes","map","note","Search","handleSearchNote","type","Header","handleToggleDarkMode","class","previousDarkmode","App","setNotes","searchText","setSearchText","JSON","parse","localStorage","getItem","darkMode","setDarkMode","useEffect","savedNotes","setItem","stringify","newNotes","filter","window","location","reload","toLowerCase","includes","Date","newNote","nanoid","toLocaleDateString","updatedList","item","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7e5eec58.chunk.js","sourcesContent":["import { MdDeleteForever, MdModeEdit } from 'react-icons/md'\r\nimport { useState, useEffect } from 'react';\r\n\r\nconst Note = ({ id, text, date, handleDeleteNote, handleEditNote }) => {\r\n\r\n    const [editNote, setEditNote] = useState(false);\r\n    const [noteText, setNoteText] = useState(text);\r\n    const characterLimit = 200;\r\n    const handleChange = (event) => {\r\n        if (characterLimit - event.target.value.length >= 0) {\r\n            setNoteText(event.target.value);\r\n        }\r\n    }\r\n    // useEffect(() => {\r\n    //     setNoteText(text)\r\n    // }, [noteText]);\r\n    const handleSaveClick = (id) => {\r\n        setEditNote(!editNote);\r\n        handleEditNote(noteText, id);\r\n    }\r\n\r\n    const moveCaretAtEnd = (e) => {\r\n        var temp_value = e.target.value\r\n        e.target.value = ''\r\n        e.target.value = temp_value\r\n    }\r\n\r\n    return <div>\r\n        {\r\n            editNote ? <div className=\"note\">\r\n                <textarea className=\"edit_textarea\" rows='8' cols='10' onChange={handleChange} autoFocus value={noteText} onFocus={moveCaretAtEnd}> </textarea>\r\n                <div className='note-footer'>\r\n                    <small>{characterLimit - noteText.length} Remaining</small>\r\n                    <button onClick={() => handleSaveClick(id)} className=\"save\">Save</button>\r\n                </div>\r\n            </div>\r\n                : <div className=\"note\"> <span className=\"spanik\">{text}</span>\r\n                    <div className=\"note-footer\">\r\n                        <small>\r\n                            {date}\r\n                        </small>\r\n                        <div>\r\n                            <MdModeEdit onClick={() => setEditNote(!editNote)} className='edit-icon bounce' size='1.3em' />\r\n                            <MdDeleteForever onClick={() => handleDeleteNote(id)} className='delete-icon bounce' size='1.3em' />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n        }\r\n\r\n\r\n\r\n\r\n    </div >\r\n}\r\nexport default Note;","import { useState } from 'react';\r\nconst AddNote = ({ handleAddNote }) => {\r\n    const [noteText, setNoteText] = useState('');\r\n    const characterLimit = 200;\r\n    const handleChange = (event) => {\r\n        if (characterLimit - event.target.value.length >= 0) {\r\n            setNoteText(event.target.value);\r\n        }\r\n    }\r\n    const handleSaveClick = () => {\r\n        if (noteText.trim().length > 0) {\r\n            handleAddNote(noteText);\r\n            setNoteText('');\r\n        }\r\n    }\r\n    return (<div className=\"note new\">\r\n        <textarea value={noteText} onChange={handleChange} rows='8' cols='10' placeholder='Type to add a note...'></textarea>\r\n        <div className='note-footer'>\r\n            <small>{characterLimit - noteText.length} Remaining</small>\r\n            <button className=\"save\" onClick={handleSaveClick}>Save</button>\r\n        </div>\r\n    </div>)\r\n}\r\nexport default AddNote;","import Note from './Note'\r\nimport AddNote from './AddNote'\r\nconst NotesList = ({ notes, handleAddNote, handleDeleteNote, handleEditNote }) => {\r\n    return (\r\n        <div className='noteslist'>\r\n            {\r\n                notes.map((note) => <Note handleDeleteNote={handleDeleteNote} handleEditNote={handleEditNote} id={note.id} text={note.text} date={note.date} />)\r\n            }\r\n            <AddNote handleAddNote={handleAddNote} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NotesList;","import react from 'react';\r\nimport { MdSearch } from 'react-icons/md';\r\n\r\nconst Search = ({ handleSearchNote }) => {\r\n    return <div className='search'>\r\n        <MdSearch className='search-icons' size='1.3em' />\r\n        <input onChange={(event) => handleSearchNote(event.target.value)} type=\"text\" placeholder='type to search' />\r\n    </div>;\r\n}\r\n\r\nexport default Search;","import React from 'react'\r\n\r\nconst Header = ({ handleToggleDarkMode }) => {\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"header\">\r\n                <h1><div class=\"morphing\">\r\n                    <div class=\"word\">When your heart</div>\r\n                    <div class=\"word\">speaks,</div>\r\n                    <div class=\"word\">take good notes...</div>\r\n                </div></h1>\r\n            </div>\r\n            <div className=\"togglik\">\r\n                <button onClick={() => handleToggleDarkMode((previousDarkmode) => !previousDarkmode)} className=\"save\">Board Color</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import NotesList from './Components/NotesList';\nimport { useState, useEffect } from 'react';\nimport { nanoid } from 'nanoid';\nimport Search from './Components/Search'\nimport Header from './Components/Header';\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n\n  const [searchText, setSearchText] = useState('');\n  const [darkMode, setDarkMode] = useState(JSON.parse(localStorage.getItem('darkmode')));\n\n  useEffect(() => {\n    const savedNotes = JSON.parse(\n      localStorage.getItem('react-notes-app-data')\n    );\n    if (savedNotes) {\n      setNotes(savedNotes);\n    }\n  }, [])\n\n  useEffect(() => {\n    localStorage.setItem('react-notes-app-data', JSON.stringify(notes));\n  }, [notes]);\n  useEffect(() => {\n    localStorage.setItem('darkmode', JSON.stringify(darkMode))\n  }, [darkMode])\n\n  const addNote = (text) => {\n    const date = new Date();\n    const newNote = {\n      id: nanoid(),\n      text: text,\n      date: date.toLocaleDateString(),\n    }\n    const newNotes = [...notes, newNote];\n    setNotes(newNotes);\n  }\n  const deleteNote = (id) => {\n    const newNotes = notes.filter((note) => note.id !== id);\n    setNotes(newNotes);\n    window.location.reload();\n  }\n\n  const editNote = (text, id) => {\n    let updatedList = notes.map(item => {\n      if (item.id == id) {\n        return { ...item, text: text }; //gets everything that was already in item, and updates \"done\"\n      }\n      return item; // else return unmodified item \n    });\n    setNotes(updatedList);\n  }\n\n  return <div className={`${darkMode && 'dark-mode'}`}>\n    <div className='container'>\n      <Header handleToggleDarkMode={setDarkMode} />\n      <Search handleSearchNote={setSearchText} /><NotesList handleDeleteNote={deleteNote}\n        notes={notes.filter((note) => note.text.toLowerCase().includes(searchText))}\n        handleAddNote={addNote}\n        handleEditNote={editNote} /></div>\n  </div>\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}